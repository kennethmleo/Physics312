---
title: Language Models
author: Kenneth Leo
bibliography: references.bib
format:
  html:
    code-fold: true
jupyter: python3
---

Language models are an important part of natural language processing (NLP) since they provide a way for computers to process or understand the natural language and to be able to extract information that can be used in different applications. These **natural language** are something that is being used by humans and evolves naturally through repetitive use (speech, sign language, non-verbal cues). 

## What is a language model?

In its simplest form, a language model is a probability distribution such that, given a sequence of words, a language model will give the probability of all the words being chosen next in the available vocabulary. For example, given a series of words $w_{1:(t-1)} = (w_1,...,w_{t-1})$, a language model will give us the probability of all words in its vocabulary $V$ to appear next to the series of words.
$$
P(w_t | w_{1:(t-1)}), \ \ \ \ \ \ \ w_1,...,w_{t-1}\in V
$$

So if we want our model to complete our sentence, we select the word which has the highest probability and then put that word to the series of words and then use the model again to generate the next word. So the essence of a language model is to simply imitate how a human would respond to different prompts.

To give an idea of what a language model can do, let us look at the ChatGPT, see @fig-gpt, which is an artificial intelligence (AI) chatbot that is developed by OpenAI last November 2022.
 
![Example of a language model (ChatGPT)](Figures_LLM/chat_gpt_sample.gif){#fig-gpt}

We asked the AI to explain quantum computing in simple terms and we see how it was able to provide an extensive discsussion of what quantum computing is. Now, the reason why these AI chatbots are gaining such traction is that it serves as a good starting point when writing or when you want to gain a better understanding of topics that were not discussed properly for example. 


## Neural Network-Based Language Model (Types of Language Models)

ChatGPT is an example of a generative pre-trained transformer (GPT) which is a type of language model that relies on deep learning that generates texts based on a given input text.  


## Evolution of Language Models

## Training Language Models
Focusing on the transformer models, we need to know how the neural network model is being trained: including the *pre-training* and *fine-tuning* processes. In pre-training process, we provide a general language model that has a good understarding of how language is being used in a variety of settings. 

For a neural network, we use $n$ inputs and then it is processed in several hidden layers until it reaches an output layer. Ideally, we want the output of our neural network to be close to the actual/real output. If that is not the case, then we use **gradient descent** to change the parameters to reduce the loss function of our network. In gradient descent, what happens is we use the output and compute some values and then feed it back to our hidden layers until the loss is minimized, which is why the process is also called backpropagation, see @fig-neural.

![Simplified Neural Network](Figures_LLM/neural_network.png){#fig-neural}

One problem of the neural network above is that the input size is fixed and in general, we would want to process input sizes that are longer or shorter. Now in the field of language moelling, there are two types of networks that were considered state of the art: *recurrent neural networks* and *long short-term memory networks*.

#### Recurrent neural networks (RNNs)

In a recurrent neural network, we still have the same neural network discussed above to every word in a series of words. Whats different for RNNs is that last word (newest word) in the sequence of words has the most influence in choosing the next word and the probability of influence of previous words reduce exponentially as new words are being introduced. We see in @fig-rnn how RNNs are able to connect information (or words) in a sequential manner. 

![Recurring Neural Network](Figures_LLM/rnn.png){#fig-rnn}

This makes sense but the problem is, language in itself is more nuanced in the sense that sometimes we need to take into account not only the last word in our sentence but the sentence as a whole. For example, in @fig-rnn, if we need the output $h_{10}$, the information from the input $x_1$ has very little effect on the output and this might pose a problem if we are for example dealing with a sentence whose subject and verb are very far from each other. Because of this unique feature of language, the concept of older worlds having less influence becomes a bug and is called the *vanishing gradients* problem



#### Long short-term memory (LSTM) networks

Now LSTMs solve the *vanishing gradients* problem by introducing a "memory" state whose influence is determined by gates defined by more learnable parameters. The main difference of LSTM fromm RNN is that the former type of network remembers information for long periods of time by default but has there functions, called gates that can either use the information stored to process the output or to "forget" the previous information and not use for the output.

![Long Short-Term Memory Network](Figures_LLM/lstm.png){#fig-lstm}

In an LSTM network, there are three gates that are needed to pass through. First is the gate that chooses which information to forget, then the second gate decides which information to store. In the second gate, we have two functions which decides which values will be updated and what values will be used to update. Lastly, the third gate will decide which information will be the output.

*Drawback of RRN and LSTM*
Now, while both networks are successful in predicting the next word given a series of words, one major drawback of these two networks is that they require their input data to be processed sequentially, that is in order to process the next word of input $x_i$, we need the result of the previous input $x_{i-1}$. 

The *attention* mechanism addresses this issue by stacking the input in a matrix such that they can all be processed at the same time. According to the paper "Attention is all you need", the authors defined the attention function as the following:

``An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum  of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.``

Now, the attention mechanism is used in a neural network architecture called a **transformer**.

Here is how the transformer neural network works:

1. Tokenization

Tokenization is the process of converting words or any natural language to tokens which are the ones processed by our computers.  There are three main approaches in tokenization which are the following:

- Word-based: Split a sentence on spaces where generally, punctuation marks are also split into different tokens.
- Subword-based: Split words into subwords. Example would be "o c ca sion".
- Character-based: Split sentence into individual characters.

For example,  taking the sentence "Once again Mr. Costner has dragged out a movie for far longer than necessary." 

Using the ``fastai`` module in Python, we can implement the following types of tokenization. For the word-based tokenization, we use the following block of following code:

{{< embed nlp_beginners.ipynb#word-tokenizer echo=true >}}

{{< embed penguins.ipynb#fig-bill-marginal >}}