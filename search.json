[
  {
    "objectID": "content/acknowledgements.html",
    "href": "content/acknowledgements.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "This repo and GitHub Action was based on the tutorial by Openscapes quarto-website-tutorial by Julia Lowndes and Stefanie Butland."
  },
  {
    "objectID": "content/customizing.html",
    "href": "content/customizing.html",
    "title": "Customization",
    "section": "",
    "text": "Quarto allow many bells and whistles to make nice output. Read the documentation here Quarto documentation."
  },
  {
    "objectID": "content/customizing.html#examples",
    "href": "content/customizing.html#examples",
    "title": "Customization",
    "section": "Examples",
    "text": "Examples\nLooking at other people’s Quarto code is a great way to figure out how to do stuff. Most will have a link to a GitHub repo where you can see the raw code. Look for a link to edit page or see source code. This will usually be on the right. Or look for the GitHub icon somewhere.\n\nQuarto gallery\nnmfs-openscapes\nFaye lab manual\nquarto-titlepages Note the link to edit is broken. Go to repo and look in documentation directory."
  },
  {
    "objectID": "content/diffusion.html",
    "href": "content/diffusion.html",
    "title": "Diffusion Models",
    "section": "",
    "text": "Here is the general idea on how nonequilibrium thermodynamics was used to create an algorithm for generative modelling:\n\nConvert images to a simple noise distribution\nReverse the process by using the distribution to create new images.\n\nTo understand how this works, the article titled “The Physics Principle That Inspired Modern AI Art” described the process best. Suppose we have a grayscale image consisting of two pixels, with different grayscale values. If we plot the 2D plot of this, with each axis representing the grayscale values, we get a single point.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\nnum1 = np.random.randint(0,256)\nnum2 = np.random.randint(0,256)\nx = np.array([[num1,num2]])\nplt.figure(figsize = (12,6))\n\nplt.subplot(121)\nplt.imshow(x, vmin = 0,vmax = 255, cmap = 'gray')\nplt.xticks([])\nplt.yticks([])\nplt.title(\"grayscale values: \" + str(num1) + \" and \" + str(num2))\n\nplt.subplot(122)\nplt.scatter([num1],[num2])\nplt.xlabel('image grayscale 1 value')\nplt.ylabel('image grayscale 2 value')\nplt.xlim(0,256)\nplt.ylim(0,256)\nplt.show()\n\n\n\n\n\nIf we have let’s say 20 grayscale images consisting of two pixels each and plot the grayscale values in the 2D plot, we notice that some points are closer to each other than other points. Then we can actually use this 2D plot to generate a 2D probability distribution function such that if we want to generate a new image, we just select a point from our distribution function and the result will give us the values of the pixels of our image, which is a combination of all the images from where we got the probability distribution from, with the images that clustered together having the highest similarity.\n\n\nCode\nnum1_list = []\nnum2_list = []\n\nplt.figure(figsize = (12*1,6*1.5))\n\nfor i in range(20):\n    plt.subplot(5,4,i+1)\n    num1 = np.random.randint(0,256)\n    num2 = np.random.randint(0,256)\n    num1_list.append(num1)\n    num2_list.append(num2)\n    x = np.array([[num1,num2]])\n    plt.imshow(x, vmin = 0,vmax = 255, cmap = 'gray')\n    plt.xticks([])\n    plt.yticks([])\n    plt.title(\"grayscale values: \" + str(num1) + \" and \" + str(num2), fontsize = 8)\nplt.show()\n\nplt.figure(figsize = (6,6))\nplt.scatter(num1_list,num2_list)\nplt.xlabel('image grayscale 1 value')\nplt.ylabel('image grayscale 2 value')\nplt.xlim(0,256)\nplt.ylim(0,256)\nplt.show()\n\n\n\n\n\n\n\n\nIf we extend this to an actual image, we get an N-D plot depending on the number of pixels of our image, with the simplified explanation still holding true. And the challenge now for researchers is how to generate this complicated probability distribution function.\nPitfall encoutered: Images formed just looked like blobs, but still cool! The general ‘shape’ was there, but in blob form"
  },
  {
    "objectID": "content/diffusion.html#model-based-on-estimating-gradients-of-data-distribution",
    "href": "content/diffusion.html#model-based-on-estimating-gradients-of-data-distribution",
    "title": "Diffusion Models",
    "section": "Model based on Estimating Gradients of Data Distribution",
    "text": "Model based on Estimating Gradients of Data Distribution"
  },
  {
    "objectID": "content/diffusion.html#denoising-diffusion-probabilistic-models",
    "href": "content/diffusion.html#denoising-diffusion-probabilistic-models",
    "title": "Diffusion Models",
    "section": "Denoising Diffusion Probabilistic Models",
    "text": "Denoising Diffusion Probabilistic Models"
  },
  {
    "objectID": "content/language-model.html",
    "href": "content/language-model.html",
    "title": "Language Models",
    "section": "",
    "text": "Language models are an important part of natural language processing (NLP) since they provide a way for computers to process or understand the natural language and to be able to extract information that can be used in different applications. These natural language are something that is being used by humans and evolves naturally through repetitive use (speech, sign language, non-verbal cues)."
  },
  {
    "objectID": "content/language-model.html#what-is-a-language-model",
    "href": "content/language-model.html#what-is-a-language-model",
    "title": "Language Models",
    "section": "What is a language model?",
    "text": "What is a language model?\nIn its simplest form, a language model is a probability distribution such that, given a sequence of words, a language model will give the probability of all the words being chosen next in the available vocabulary. For example, given a series of words \\(w_{1:(t-1)} = (w_1,...,w_{t-1})\\), a language model will give us the probability of all words in its vocabulary \\(V\\) to appear next to the series of words. \\[\nP(w_t | w_{1:(t-1)}), \\ \\ \\ \\ \\ \\ \\ w_1,...,w_{t-1}\\in V\n\\]\nSo if we want our model to complete our sentence, we select the word which has the highest probability and then put that word to the series of words and then use the model again to generate the next word. So the essence of a language model is to simply imitate how a human would respond to different prompts.\nTo give an idea of what a language model can do, let us look at the ChatGPT, see Figure 1, which is an artificial intelligence (AI) chatbot that is developed by OpenAI last November 2022.\n\n\n\nFigure 1: Example of a language model (ChatGPT)\n\n\nWe asked the AI to explain quantum computing in simple terms and we see how it was able to provide an extensive discsussion of what quantum computing is. Now, the reason why these AI chatbots are gaining such traction is that it serves as a good starting point when writing or when you want to gain a better understanding of topics that were not discussed properly for example."
  },
  {
    "objectID": "content/language-model.html#neural-network-based-language-model-types-of-language-models",
    "href": "content/language-model.html#neural-network-based-language-model-types-of-language-models",
    "title": "Language Models",
    "section": "Neural Network-Based Language Model (Types of Language Models)",
    "text": "Neural Network-Based Language Model (Types of Language Models)\nChatGPT is an example of a generative pre-trained transformer (GPT) which is a type of language model that relies on deep learning that generates texts based on a given input text."
  },
  {
    "objectID": "content/language-model.html#training-language-models",
    "href": "content/language-model.html#training-language-models",
    "title": "Language Models",
    "section": "Training Language Models",
    "text": "Training Language Models\nFocusing on the transformer models, we need to know how the neural network model is being trained: including the pre-training and fine-tuning processes. In pre-training process, we provide a general language model that has a good understarding of how language is being used in a variety of settings.\nFor a neural network, we use \\(n\\) inputs and then it is processed in several hidden layers until it reaches an output layer. Ideally, we want the output of our neural network to be close to the actual/real output. If that is not the case, then we use gradient descent to change the parameters to reduce the loss function of our network. In gradient descent, what happens is we use the output and compute some values and then feed it back to our hidden layers until the loss is minimized, which is why the process is also called backpropagation, see Figure 2.\n\n\n\nFigure 2: Simplified Neural Network\n\n\nOne problem of the neural network above is that the input size is fixed and in general, we would want to process input sizes that are longer or shorter. Now in the field of language moelling, there are two types of networks that were considered state of the art: recurrent neural networks and long short-term memory networks.\n\nRecurrent neural networks (RNNs)\nIn a recurrent neural network, we still have the same neural network discussed above to every word in a series of words. Whats different for RNNs is that last word (newest word) in the sequence of words has the most influence in choosing the next word and the probability of influence of previous words reduce exponentially as new words are being introduced. We see in Figure 3 how RNNs are able to connect information (or words) in a sequential manner.\n\n\n\nFigure 3: Recurring Neural Network\n\n\nThis makes sense but the problem is, language in itself is more nuanced in the sense that sometimes we need to take into account not only the last word in our sentence but the sentence as a whole. For example, in Figure 3, if we need the output \\(h_{10}\\), the information from the input \\(x_1\\) has very little effect on the output and this might pose a problem if we are for example dealing with a sentence whose subject and verb are very far from each other. Because of this unique feature of language, the concept of older worlds having less influence becomes a bug and is called the vanishing gradients problem\n\n\nLong short-term memory (LSTM) networks\nNow LSTMs solve the vanishing gradients problem by introducing a “memory” state whose influence is determined by gates defined by more learnable parameters. The main difference of LSTM fromm RNN is that the former type of network remembers information for long periods of time by default but has there functions, called gates that can either use the information stored to process the output or to “forget” the previous information and not use for the output.\n\n\n\nFigure 4: Long Short-Term Memory Network\n\n\nIn an LSTM network, there are three gates that are needed to pass through. First is the gate that chooses which information to forget, then the second gate decides which information to store. In the second gate, we have two functions which decides which values will be updated and what values will be used to update. Lastly, the third gate will decide which information will be the output.\nDrawback of RRN and LSTM Now, while both networks are successful in predicting the next word given a series of words, one major drawback of these two networks is that they require their input data to be processed sequentially, that is in order to process the next word of input \\(x_i\\), we need the result of the previous input \\(x_{i-1}\\).\nThe attention mechanism addresses this issue by stacking the input in a matrix such that they can all be processed at the same time. According to the paper “Attention is all you need”, the authors defined the attention function as the following:\nAn attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum  of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.\nNow, the attention mechanism is used in a neural network architecture called a transformer.\nHere is how the transformer neural network works:\n\nTokenization\n\nTokenization is the process of converting words or any natural language to tokens which are the ones processed by our computers. There are three main approaches in tokenization which are the following:\n\nWord-based: Split a sentence on spaces where generally, punctuation marks are also split into different tokens.\nSubword-based: Split words into subwords. Example would be “o c ca sion”.\nCharacter-based: Split sentence into individual characters.\n\nFor example, taking the sentence “Once again Mr. Costner has dragged out a movie for far longer than necessary.”\nUsing the fastai module in Python, we can implement the different types of tokenization. For example, for word tokenization, we have the following code and output\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom fastai.text.all import *\npath = untar_data(URLs.IMDB)\n\nfiles = get_text_files(path, folders = ['train', 'test', 'unsup'])\ntxt = files[0].open().read()\nprint(\"Original Sentence:\")\nprint(txt[:77])\nprint()\nspacy = WordTokenizer()\ntoks = first(spacy([txt[:77]]))\nprint(\"Word Tokenization:\")\nprint(coll_repr(toks, 30))\n\n\nOriginal Sentence:\nOnce again Mr. Costner has dragged out a movie for far longer than necessary.\n\n\n\nWord Tokenization:\n(#15) ['Once','again','Mr.','Costner','has','dragged','out','a','movie','for','far','longer','than','necessary','.']\n\n\nTokenization is an important step in the neural network architecture since it converts the natural language that we understand to these tokens that can be understood by our machines after converter them to numbers, a process called Numericalization which can also be done using the fastai module.\nNow that we have the numbers that our computer can process, we can actually now split them into 3 batches: training, validating, and testing batches. We put the training batch in a chosen language model and then validate the results. Now after training our model, we can now actually specify the things that our model can do. In the following chapter, we discuss some of the things that language models can actually do."
  },
  {
    "objectID": "content/language-model.html#different-things-models-for-nlp-can-do",
    "href": "content/language-model.html#different-things-models-for-nlp-can-do",
    "title": "Language Models",
    "section": "Different things models for NLP can do!",
    "text": "Different things models for NLP can do!\nText Classification\nThere are two types of classification wherein NLP models are very useful for: binary classification and multi-label classification. Binary classification is useful in sentiment analysis where texts can be labeled as something good or bad which can help informed decisions in fields like politics, and marketing. Multi-label classification on the other hand is useful in organizing and filtering tons of information in social media and news for example.\nToken Classification\nIn token classification, we classify the tokens produced after the tokenization process. This is actually useful for example in in labeling tokens specifically those that can be categorized as people or entities that need to be identified. Another thing that this is useful for is for identifying which part of speech certain words/tokens are. We can actually use NLP models to create those tree diagrams where a sentence can be broken down into different part of speeches!\nTranslation\nOf course, a common application of NLP models is for translating a language to another. Language models learns the structure of the input so that it can be able to translate it to another language with the use of transfer learning models. These transfer learning models are actually useful in order to reduce the time it would take the model to train.\n\nQuestion Answering\nNow, one of the most commonly seen application of language models is this question answering. Siri, Alexa, Bixby, and Google Assistant are examples of some end-user products that uses language model to answer day to day questions of people. And because of the sudden interest of the general public to these language models (ChatGPT for example), many researchers and developers have actually made their pre-trained models open access, which means they are publicly available for non-commercial use. An example of this would be the alpaca.cpp which makes use of the LLaMA foundation model with some finetuning mechanisms and a couple tweaks to make it into a chat interface. Here is a sample gif of how it works. It’s basically a locally run ChatGPT!\n\n\n\nFigure 5: Example of alpaca.cpp"
  },
  {
    "objectID": "content/language_model.html",
    "href": "content/language_model.html",
    "title": "Physics 312 - Advanced Mathematical Physics II",
    "section": "",
    "text": "Language models are an important part of natural language processing (NLP) since they provide a way for computers to process or understand the natural language and to be able to extract information that can be used in different applications. These natural language are something that is being used by humans and evolves naturally through repetitive use (speech, sign language, non-verbal cues)."
  },
  {
    "objectID": "content/language_model.html#what-is-a-language-model",
    "href": "content/language_model.html#what-is-a-language-model",
    "title": "Physics 312 - Advanced Mathematical Physics II",
    "section": "What is a language model?",
    "text": "What is a language model?\nIn its simplest form, a language model is a probability distribution such that, given a sequence of words, a language model will give the probability of all the words being chosen next in the available vocabulary. For example, given a series of words \\(w_{1:(t-1)} = (w_1,...,w_{t-1})\\), a language model will give us the probability of all words in its vocabulary \\(V\\) to appear next to the series of words. \\[\nP(w_t | w_{1:(t-1)}), \\ \\ \\ \\ \\ \\ \\ w_1,...,w_{t-1}\\in V\n\\]\nSo if we want our model to complete our sentence, we select the word which has the highest probability and then put that word to the series of words and then use the model again to generate the next word. So the essence of a language model is to simply imitate how a human would respond to different prompts.\nTo give an idea of what a language model can do, let us look at the ChatGPT, see Figure 1, which is an artificial intelligence (AI) chatbot that is developed by OpenAI last November 2022.\n\n\n\nFigure 1: Example of a language model (ChatGPT)\n\n\nWe asked the AI to explain quantum computing in simple terms and we see how it was able to provide an extensive discsussion of what quantum computing is. Now, the reason why these AI chatbots are gaining such traction is that it serves as a good starting point when writing or when you want to gain a better understanding of topics that were not discussed properly for example."
  },
  {
    "objectID": "content/language_model.html#neural-network-based-language-model-types-of-language-models",
    "href": "content/language_model.html#neural-network-based-language-model-types-of-language-models",
    "title": "Physics 312 - Advanced Mathematical Physics II",
    "section": "Neural Network-Based Language Model (Types of Language Models)",
    "text": "Neural Network-Based Language Model (Types of Language Models)\nChatGPT is an example of a generative pre-trained transformer (GPT) which is a type of language model that relies on deep learning that generates texts based on a given input text."
  },
  {
    "objectID": "content/language_model.html#training-language-models",
    "href": "content/language_model.html#training-language-models",
    "title": "Physics 312 - Advanced Mathematical Physics II",
    "section": "Training Language Models",
    "text": "Training Language Models\nFocusing on the transformer models, we need to know how the neural network model is being trained: including the pre-training and fine-tuning processes. In pre-training process, we provide a general language model that has a good understarding of how language is being used in a variety of settings.\nFor a neural network, we use \\(n\\) inputs and then it is processed in several hidden layers until it reaches an output layer. Ideally, we want the output of our neural network to be close to the actual/real output. If that is not the case, then we use gradient descent to change the parameters to reduce the loss function of our network. In gradient descent, what happens is we use the output and compute some values and then feed it back to our hidden layers until the loss is minimized, which is why the process is also called backpropagation, see Figure 2.\n\n\n\nFigure 2: Simplified Neural Network\n\n\nOne problem of the neural network above is that the input size is fixed and in general, we would want to process input sizes that are longer or shorter. Now in the field of language moelling, there are two types of networks that were considered state of the art: recurrent neural networks and long short-term memory networks.\n\nRecurrent neural networks (RNNs)\nIn a recurrent neural network, we still have the same neural network discussed above to every word in a series of words. Whats different for RNNs is that last word (newest word) in the sequence of words has the most influence in choosing the next word and the probability of influence of previous words reduce exponentially as new words are being introduced. We see in Figure 3 how RNNs are able to connect information (or words) in a sequential manner.\n\n\n\nFigure 3: Recurring Neural Network\n\n\nThis makes sense but the problem is, language in itself is more nuanced in the sense that sometimes we need to take into account not only the last word in our sentence but the sentence as a whole. For example, in Figure 3, if we need the output \\(h_{10}\\), the information from the input \\(x_1\\) has very little effect on the output and this might pose a problem if we are for example dealing with a sentence whose subject and verb are very far from each other. Because of this unique feature of language, the concept of older worlds having less influence becomes a bug and is called the vanishing gradients problem\n\n\nLong short-term memory (LSTM) networks\nNow LSTMs solve the vanishing gradients problem by introducing a “memory” state whose influence is determined by gates defined by more learnable parameters. The main difference of LSTM fromm RNN is that the former type of network remembers information for long periods of time by default but has there functions, called gates that can either use the information stored to process the output or to “forget” the previous information and not use for the output.\n\n\n\nFigure 4: Long Short-Term Memory Network\n\n\nIn an LSTM network, there are three gates that are needed to pass through. First is the gate that chooses which information to forget, then the second gate decides which information to store. In the second gate, we have two functions which decides which values will be updated and what values will be used to update. Lastly, the third gate will decide which information will be the output.\nDrawback of RRN and LSTM Now, while both networks are successful in predicting the next word given a series of words, one major drawback of these two networks is that they require their input data to be processed sequentially, that is in order to process the next word of input \\(x_i\\), we need the result of the previous input \\(x_{i-1}\\).\nThe attention mechanism addresses this issue by stacking the input in a matrix such that they can all be processed at the same time. According to the paper “Attention is all you need”, the authors defined the attention function as the following:\nAn attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum  of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.\nNow, the attention mechanism is used in a neural network architecture called a transformer.\nLet us now discuss how transformer neural network works. First step is what we call tokenization. Tokenization is the process of converting words or any natural language to tokens which are the ones processed by our computers. There are three main approaches in tokenization which are the following:\n\nWord-based: Split a sentence on spaces where generally, punctuation marks are also split into different tokens.\nSubword-based: Split words into subwords. Example would be “o c ca sion”.\nCharacter-based: Split sentence into individual characters.\n\nFor example, taking the sentence “Once again Mr. Costner has dragged out a movie for far longer than necessary.”\nUsing the fastai module in Python, we can implement the following types of tokenization. For the word-based tokenization, we use the following block of following code:\n\nfrom fastai.text.all import *\npath = untar_data(URLs.IMDB)\n\n\nfiles = get_text_files(path, folders = ['train', 'test', 'unsup'])\n\n\ntxt = files[0].open().read(); txt[:77]\n\n'Once again Mr. Costner has dragged out a movie for far longer than necessary.'\n\n\n\nspacy = WordTokenizer()\ntoks = first(spacy([txt[:77]]))\nprint(coll_repr(toks, 30))\n\n(#15) ['Once','again','Mr.','Costner','has','dragged','out','a','movie','for','far','longer','than','necessary','.']\n\n\nFor subword tokenization:\n\ntxts = L(o.open().read() for o in files[:2000])\ndef subword(sz):\n    sp = SubwordTokenizer(vocab_sz=sz)\n    sp.setup(txts)\n    return ' '.join(first(sp([txt]))[:40])\nsubword(1000)\n\n\n\n\n\n\n\n\n'▁O n ce ▁again ▁M r . ▁Co st n er ▁has ▁ d ra g g ed ▁out ▁a ▁movie ▁for ▁far ▁long er ▁than ▁ ne ce s s ar y . ▁A side ▁from ▁the ▁ ter'\n\n\nTokenization is an important step in the neural network architecture since it converts the natural language that we understand to these tokens that can be understood by our machines after converter them to numbers, a process called Numericalization which can also be done using the fastai module.\nNow that we have the numbers that our computer can process, we can actually now split them into 3 batches: training, validating, and testing batches. We put the training batch in a chosen language model and then validate the results. Now after training our model, we can now actually specify the things that our model can do. In the following chapter, we discuss some of the things that language models can actually do.\n\n\nDifferent things models for NLP can do!\nText Classification\nThere are two types of classification wherein NLP models are very useful for: binary classification and multi-label classification. Binary classification is useful in sentiment analysis where texts can be labeled as something good or bad which can help informed decisions in fields like politics, and marketing. Multi-label classification on the other hand is useful in organizing and filtering tons of information in social media and news for example.\nToken Classification\nIn token classification, we classify the tokens produced after the tokenization process. This is actually useful for example in in labeling tokens specifically those that can be categorized as people or entities that need to be identified. Another thing that this is useful for is for identifying which part of speech certain words/tokens are. We can actually use NLP models to create those tree diagrams where a sentence can be broken down into different part of speeches!\nTranslation\nOf course, a common application of NLP models is for translating a language to another. Language models learns the structure of the input so that it can be able to translate it to another language with the use of transfer learning models. These transfer learning models are actually useful in order to reduce the time it would take the model to train.\nQuestion Answering\nNow, one of the most commonly seen application of language models is this question answering. Siri, Alexa, Bixby, and Google Assistant are examples of some end-user products that uses language model to answer day to day questions of people. And because of the sudden interest of the general public to these language models (ChatGPT for example), many researchers and developers have actually made their pre-trained models open access, which means they are publicly available for non-commercial use. An example of this would be the alpaca.cpp which makes use of the LLaMA foundation model with some finetuning mechanisms and a couple tweaks to make it into a chat interface. Here is a sample gif of how it works. It’s basically a locally run ChatGPT!\n\n\n\nFigure 5: Example of alpaca.cpp"
  },
  {
    "objectID": "content/nlp_beginners.html",
    "href": "content/nlp_beginners.html",
    "title": "Physics 312 - Advanced Mathematical Physics II",
    "section": "",
    "text": "from fastai.text.all import *\npath = untar_data(URLs.IMDB)\n\nModuleNotFoundError: No module named 'fastai'\n\n\n\nfiles = get_text_files(path, folders = ['train', 'test', 'unsup'])\n\n\ntxt = files[0].open().read(); txt[:77]\n\n'Once again Mr. Costner has dragged out a movie for far longer than necessary.'\n\n\nWord Tokenization\n\n\nCode\nspacy = WordTokenizer()\ntoks = first(spacy([txt[:77]]))\nprint(coll_repr(toks, 30))\n\n\n(#15) ['Once','again','Mr.','Costner','has','dragged','out','a','movie','for','far','longer','than','necessary','.']\n\n\n\nfirst(spacy(['The U.S. dollar $1 is $1.00.']))\n\n(#9) ['The','U.S.','dollar','$','1','is','$','1.00','.']\n\n\n\ntkn = Tokenizer(spacy)\nprint(coll_repr(tkn(txt), 31))\n\n(#207) ['xxbos','xxmaj','once','again','xxmaj','mr','.','xxmaj','costner','has','dragged','out','a','movie','for','far','longer','than','necessary','.','xxmaj','aside','from','the','terrific','sea','rescue','sequences',',','of','which'...]\n\n\n\ndefaults.text_proc_rules\n\n[<function fastai.text.core.fix_html(x)>,\n <function fastai.text.core.replace_rep(t)>,\n <function fastai.text.core.replace_wrep(t)>,\n <function fastai.text.core.spec_add_spaces(t)>,\n <function fastai.text.core.rm_useless_spaces(t)>,\n <function fastai.text.core.replace_all_caps(t)>,\n <function fastai.text.core.replace_maj(t)>,\n <function fastai.text.core.lowercase(t, add_bos=True, add_eos=False)>]\n\n\n\ncoll_repr(tkn('&copy;   Fast.ai www.fast.ai/INDEX'), 31)\n\n\"(#11) ['xxbos','©','xxmaj','fast.ai','xxrep','3','w','.fast.ai','/','xxup','index']\"\n\n\nSubword Tokenization\n\ntxts = L(o.open().read() for o in files[:2000])\n\n\ndef subword(sz):\n    sp = SubwordTokenizer(vocab_sz=sz)\n    sp.setup(txts)\n    return ' '.join(first(sp([txt]))[:40])\n\n\nsubword(1000)\n\n'▁O n ce ▁again ▁M r . ▁Co st n er ▁has ▁ d ra g g ed ▁out ▁a ▁movie ▁for ▁far ▁long er ▁than ▁ ne ce s s ar y . ▁A side ▁from ▁the ▁ ter'\n\n\n\nsubword(200)\n\n'▁ O n ce ▁a g a in ▁ M r . ▁ C o s t n er ▁ h a s ▁ d ra g g ed ▁ o u t ▁a ▁movie ▁for ▁f ar ▁ l'\n\n\n\nsubword(10000)\n\n'▁On ce ▁again ▁Mr . ▁Costner ▁has ▁dragged ▁out ▁a ▁movie ▁for ▁far ▁longer ▁than ▁necessary . ▁A side ▁from ▁the ▁terrific ▁sea ▁rescue ▁sequences , ▁of ▁which ▁there ▁are ▁very ▁few ▁I ▁just ▁did ▁not ▁care ▁about ▁any ▁of'\n\n\nNumericalization with fastai\n\ntoks = tkn(txt)\nprint(coll_repr(tkn(txt), 31))\n\n(#207) ['xxbos','xxmaj','once','again','xxmaj','mr','.','xxmaj','costner','has','dragged','out','a','movie','for','far','longer','than','necessary','.','xxmaj','aside','from','the','terrific','sea','rescue','sequences',',','of','which'...]\n\n\n\ntoks200 = txts[:200].map(tkn)\ntoks200[0]\n\n(#207) ['xxbos','xxmaj','once','again','xxmaj','mr','.','xxmaj','costner','has'...]\n\n\n\nnum = Numericalize()\nnum.setup(toks200)\ncoll_repr(num.vocab,20)\n\n\"(#1968) ['xxunk','xxpad','xxbos','xxeos','xxfld','xxrep','xxwrep','xxup','xxmaj','the','.',',','a','and','of','to','is','it','i','in'...]\"\n\n\n\nnums = num(toks)[:20]; nums\n\nTensorText([   2,    8,  349,  183,    8, 1177,   10,    8, 1178,   60, 1455,\n              62,   12,   25,   28,  189,  957,   93,  958,   10])\n\n\n\n' '.join(num.vocab[o] for o in nums)\n\n'xxbos xxmaj once again xxmaj mr . xxmaj costner has dragged out a movie for far longer than necessary .'\n\n\nPutting Our Texts into Batches for a Language Model\n\nfrom weasyprint import HTML\n\n#hide_input\nstream = \"In this chapter, we will go back over the example of classifying movie reviews we studied in chapter 1 and dig deeper under the surface. First we will look at the processing steps necessary to convert text into numbers and how to customize it. By doing this, we'll have another example of the PreProcessor used in the data block API.\\nThen we will study how we build a language model and train it for a while.\"\ntokens = tkn(stream)\nbs,seq_len = 6,15\nd_tokens = np.array([tokens[i*seq_len:(i+1)*seq_len] for i in range(bs)])\ndf = pd.DataFrame(d_tokens)\ndisplay(HTML(df.to_html(index=False,header=None)))\n\n\n-----\n\nWeasyPrint could not import some external libraries. Please carefully follow the installation steps before reporting an issue:\nhttps://doc.courtbouillon.org/weasyprint/stable/first_steps.html#installation\nhttps://doc.courtbouillon.org/weasyprint/stable/first_steps.html#troubleshooting \n\n-----\n\n\n\nOSError: cannot load library 'gobject-2.0-0': error 0x7e.  Additionally, ctypes.util.find_library() did not manage to locate a library called 'gobject-2.0-0'"
  },
  {
    "objectID": "content/penguins.html",
    "href": "content/penguins.html",
    "title": "Palmer Penguins",
    "section": "",
    "text": "import pandas as pd\nimport altair as alt\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nData from Palmer Penguins R package\n\npenguins = pd.read_csv(\"https://pos.it/palmer-penguins-github-csv\")\n\n\npenguins.groupby(\"species\").size().reset_index(name = \"count\")\n\n\n\n\n\n  \n    \n      \n      species\n      count\n    \n  \n  \n    \n      0\n      Adelie\n      152\n    \n    \n      1\n      Chinstrap\n      68\n    \n    \n      2\n      Gentoo\n      124\n    \n  \n\n\n\n\n\ncolors = [\"#FF8C00\", \"#A020F0\", \"#008B8B\"]\nsns.set_palette(colors, n_colors = 3)\n\n\npenguins[\"bill_ratio\"] = (\n   penguins[\"bill_length_mm\"] / penguins[\"bill_depth_mm\"] \n)\nsns.displot(penguins, \n            x = \"bill_ratio\", \n            hue = \"species\", \n            kind = \"kde\", fill = True, aspect = 2, height = 3)\nplt.show()\n\n\n\n\n\nsns.displot(penguins, \n            x = \"bill_depth_mm\", \n            hue = \"species\", \n            kind = \"kde\", fill = True, \n            aspect = 2, height = 3)\nplt.show()\nsns.displot(penguins, \n            x = \"bill_length_mm\", \n            hue = \"species\", \n            kind = \"kde\", fill = True, \n            aspect = 2, height = 3)\nplt.show()\n\n\n\n\n\n\n\n(a) Gentoo penguins tend to have thinner bills,\n\n\n\n\n\n\n\n(b) and Adelie penguins tend to have shorter bills.\n\n\n\n\nFigure 1: Marginal distributions of bill dimensions\n\n\n\n\nscale = alt.Scale(domain = ['Adelie', 'Chinstrap', 'Gentoo'],\n                  range = colors)\n\n\nalt.Chart(penguins).mark_circle(size=60).encode(\n    alt.X('bill_length_mm',\n        scale=alt.Scale(zero=False)\n    ),\n    alt.Y('bill_depth_mm',\n        scale=alt.Scale(zero=False)\n    ),\n    color = alt.Color('species', scale = scale),\n    tooltip=['species', 'sex', 'island']\n)\n\n\n\n\n\nFigure 2: A scatterplot of bill dimensions for penguins, made with Altair."
  },
  {
    "objectID": "content/publishing.html",
    "href": "content/publishing.html",
    "title": "Publishing",
    "section": "",
    "text": "To get your Quarto webpage to show up with the url\nyou have a few steps."
  },
  {
    "objectID": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "href": "content/publishing.html#turn-on-github-pages-for-your-repo",
    "title": "Publishing",
    "section": "Turn on GitHub Pages for your repo",
    "text": "Turn on GitHub Pages for your repo\n\nTurn on GitHub Pages under Settings > Pages . You will set pages to be made from the gh-pages branch and the root directory.\nTurn on GitHub Actions under Settings > Actions > General\n\nThe GitHub Action will automatically recreate your website when you push to GitHub after you do the initial gh-pages set-up"
  },
  {
    "objectID": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "href": "content/publishing.html#do-your-first-publish-to-gh-pages",
    "title": "Publishing",
    "section": "Do your first publish to gh-pages",
    "text": "Do your first publish to gh-pages\nThe first time you publish to gh-pages, you need to do so locally.\n\nOn your local computer, open a terminal window and cd to your repo directory. Here is what that cd command looks like for me. You command will look different because your local repo will be somewhere else on your computer.\n\ncd ~/Documents/GitHub/NOAA-quarto-simple\n\nPublish to the gh-pages. In the terminal type\n\nquarto publish gh-pages\nThis is going to render your webpage and then push the _site contents to the gh-pages branch."
  },
  {
    "objectID": "content/publishing.html#dont-like-using-gh-pages",
    "href": "content/publishing.html#dont-like-using-gh-pages",
    "title": "Publishing",
    "section": "Don’t like using gh-pages?",
    "text": "Don’t like using gh-pages?\nIn some cases, you don’t want your website on the gh-pages branch. For example, if you are creating releases and you want the website pages archived in that release, then you won’t want your website pages on the gh-pages branch.\nHere are the changes you need to make if you to avoid gh-pages branch.\n\nAt the top of _quarto.yml add the following:\n\nproject: \n  type: website\n  output-dir: docs\n\nOn GitHub under Settings > Pages set pages to be made from the main branch and the docs directory.\nMake sure docs is not listed in .gitignore\nPublish the site the first time locally using quarto publish from the terminal\nChange the GitHub Action because you can’t use quarto publish gh-pages. You’ll need to push to the main branch yourself (in the GitHub Action)\n\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up R (needed for Rmd)\n        uses: r-lib/actions/setup-r@v2\n\n      - name: Install packages (needed for Rmd)\n        run: Rscript -e 'install.packages(c(\"rmarkdown\", \"knitr\", \"jsonlite\"))'\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          # tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n        with:\n          to: html\n\n      - name: Set up Git\n        run: |\n          git config --local user.email \"actions@github.com\"\n          git config --local user.name \"GitHub Actions\"\n\n      - name: Commit all changes and push\n        run: |\n          git add -A && git commit -m 'Build site' || echo \"No changes to commit\"\n          git push origin || echo \"No changes to commit\""
  },
  {
    "objectID": "content/rendering.html",
    "href": "content/rendering.html",
    "title": "Rendering",
    "section": "",
    "text": "The repo includes a GitHub Action that will render (build) the website automatically when you make changes to the files. It will be pushed to the gh-pages branch.\nBut when you are developing your content, you will want to render it locally."
  },
  {
    "objectID": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "href": "content/rendering.html#step-1.-make-sure-you-have-a-recent-rstudio",
    "title": "Rendering",
    "section": "Step 1. Make sure you have a recent RStudio",
    "text": "Step 1. Make sure you have a recent RStudio\nHave you updated RStudio since about August 2022? No? Then update to a newer version of RStudio. In general, you want to keep RStudio updated and it is required to have a recent version to use Quarto."
  },
  {
    "objectID": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "href": "content/rendering.html#step-2.-clone-and-create-rstudio-project",
    "title": "Rendering",
    "section": "Step 2. Clone and create RStudio project",
    "text": "Step 2. Clone and create RStudio project\nFirst, clone the repo onto your local computer. How? You can click File > New Project and then select “Version Control”. Paste in the url of the repository. That will clone the repo on to your local computer. When you make changes, you will need to push those up."
  },
  {
    "objectID": "content/rendering.html#step-3.-render-within-rstudio",
    "href": "content/rendering.html#step-3.-render-within-rstudio",
    "title": "Rendering",
    "section": "Step 3. Render within RStudio",
    "text": "Step 3. Render within RStudio\nRStudio will recognize that this is a Quarto project by the presence of the _quarto.yml file and will see the “Build” tab. Click the “Render website” button to render to the _site folder.\nPreviewing: You can either click index.html in the _site folder and specify “preview in browser” or set up RStudio to preview to the viewer panel. To do the latter, go to Tools > Global Options > R Markdown. Then select “Show output preview in: Viewer panel”."
  }
]